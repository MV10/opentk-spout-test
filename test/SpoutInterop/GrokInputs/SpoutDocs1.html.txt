
<!DOCTYPE html>

<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta http-equiv="X-UA-Compatible" content="IE=edge"><title>Spout</title><link rel="stylesheet" type="text/css" href="../../styles/main.css" /><script type="text/javascript" src="../../styles/main.js"></script><script type="text/javascript">NDLoader.LoadJS("Content", "../../styles/");</script></head>

<!-- Generated by Natural Docs, version 2.2 -->

<!-- saved from url=(0016)http://localhost -->

<body onload="NDLoader.OnLoad('Content');" class="NDPage NDContentPage">

<a name="Topic877"></a><div class="CTopic TClass LC first">
 <div class="CTitle">Spout</div>
 <div class="NDClassPrototype" id="NDClassPrototype877"><div class="CPEntry TClass Current"><div class="CPName">Spout&#8203;<span class="TemplateSignature">()</span></div></div></div>
 <div class="CBody"><p><a href="https://spout.zeal.co/" target="_top">https://&#8203;spout&#8203;.zeal&#8203;.co&#8203;/</a></p><p>Main class for Spout OpenGL texture sharing</p><p>Contains both Sender and Receiver functions.</p><p>This class and other source files are included in a project</p><p>Files required are (.h and .cpp) :</p><ul><li><p>Spout</p></li><li><p>SpoutCommon</p></li><li><p>SpoutCopy</p></li><li><p>SpoutDirectX</p></li><li><p>SpoutFramecount</p></li><li><p>SpoutGL</p></li><li><p>SpoutGLextensions</p></li><li><p>SpoutSenderNames</p></li><li><p>SpoutSharedMemory</p></li><li><p>SpoutUtils</p></li></ul><p>Note that Sender and Receiver functions cannot be used within the same object.&nbsp; The SpoutSender and SpoutReceiver classes are convenience wrappers which assist the programmer by exposing only sender or receiver specific functions.</p><ul><li><p>SpoutSender</p></li><li><p>SpoutReceiver</p></li></ul><p>You can also use the Spout SDK as a dll. To build the dll, refer to the Visual Studio project in the VS2017 folder and the CMake build documentation.&nbsp; Also refer to the SpoutLibrary folder for a C-compatible dll which can be used with compilers other than Visual Studio.</p><p>For conversion of existing 2.006 applications, refer to &quot;Porting.txt&quot; in the &quot;Docs&quot; section as well as the introductory document <b>SpoutSDK_2007.pdf</b>.</p><p>More detailed information can be found in the header files for each class.&nbsp; Functions for individual classes are documented within the respective source files.&nbsp; You can access these from the following objects that are included in the Spout class.</p><ul><li><p>spoutDirectX spoutdx; (DirectX 11 texture sharing)</p></li><li><p>spoutCopy spoutcopy; (Pixel data copy)</p></li><li><p>spoutSenderNames sendernames; (Spout sender management)</p></li><li><p>spoutFrameCount frame; (Frame counting management)</p></li></ul><p>Details for practical use can be found in the source code for the Openframeworks examples.&nbsp; The methods are simple and you should be able to quickly extend to your own application or to other frameworks.</p><p>Refer to the SpoutGL base class for further documentation and details.</p></div>
</div>

<a name="Sender"></a><a name="Topic878"></a><div class="CTopic TGroup LC">
 <div class="CTitle">Sender</div>
 <div class="CBody"><p>SendFbo, SendTexture and SendImage create or update a sender as required.</p><ul><li><p>If a sender has not been created yet :</p><ul><li><p>Make sure Spout has been initialized and OpenGL context is available</p></li><li><p>Perform a compatibility check for GL/DX interop</p></li><li><p>If compatible, create interop for GL/DX transfer</p></li><li><p>If not compatible, create a DirectX 11 shared texture for the sender</p></li><li><p>Create a sender using the DX11 shared texture handle</p></li></ul></li><li><p>If the sender exists, test for size change :</p><ul><li><p>If compatible, update the shared textures and GL/DX interop</p></li><li><p>If not compatible, re-create the class DirectX shared texture to the new size</p></li><li><p>Update the sender and class variables</p></li></ul></li></ul></div>
</div>

<a name="SetSenderName"></a><a name="Topic879"></a><div class="CTopic TFunction LC">
 <div class="CTitle">SetSenderName</div>
 <div id="NDPrototype879" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">void</span> Spout::SetSenderName(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PModifierQualifier first"><span class="SHKeyword">const</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">sendername</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Set name for sender creation</p><p>If no name is specified, the executable name is used.&nbsp; Thereafter, all sending functions create and update a sender based on the size passed and the name that has been set.&nbsp; If a sender with this name is already registered, create an incremented name : sender_1, sender_2 etc.</p></div>
</div>

<a name="SetSenderFormat"></a><a name="Topic880"></a><div class="CTopic TFunction LC">
 <div class="CTitle">SetSenderFormat</div>
 <div id="NDPrototype880" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">void</span> Spout::SetSenderFormat(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first">DWORD&nbsp;</td><td class="PName last">dwFormat</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Set the sender DX11 shared texture format Compatible formats - see SpoutGL::SetDX11format(DXGI_FORMAT textureformat)</p></div>
</div>

<a name="ReleaseSender"></a><a name="Topic881"></a><div class="CTopic TFunction LC">
 <div class="CTitle">ReleaseSender</div>
 <div id="NDPrototype881" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">void</span> Spout::ReleaseSender()</div></div>
 <div class="CBody"><p>Close sender and release resources.</p><p>A new sender is created or updated by all sending functions</p></div>
</div>

<a name="SendFbo"></a><a name="Topic882"></a><div class="CTopic TFunction LC">
 <div class="CTitle">SendFbo</div>
 <div id="NDPrototype882" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::SendFbo(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="first"></td><td class="PType">GLuint&nbsp;</td><td class="PName last">FboID,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">fbowidth,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">fboheight,</td></tr><tr><td class="first"></td><td class="PType"><span class="SHKeyword">bool</span>&nbsp;</td><td class="PName last">bInvert</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Send texture attached to fbo</p><p>The fbo must be bound for read.</p><p>The sending texture can be larger than the size that the sender is set up for For example, if the application is using only a portion of the allocated texture space, such as for Freeframe plugins. (The 2.006 equivalent is DrawToSharedTexture)</p><p>To send the default OpenGL framebuffer, specify FboID = 0.&nbsp; If width and height are also 0, the function determines the viewport size.</p></div>
</div>

<a name="SendTexture"></a><a name="Topic883"></a><div class="CTopic TFunction LC">
 <div class="CTitle">SendTexture</div>
 <div id="NDPrototype883" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::SendTexture(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="first"></td><td class="PType">GLuint&nbsp;</td><td class="PName last">TextureID,</td></tr><tr><td class="first"></td><td class="PType">GLuint&nbsp;</td><td class="PName last">TextureTarget,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">width,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">height,</td></tr><tr><td class="first"></td><td class="PType"><span class="SHKeyword">bool</span>&nbsp;</td><td class="PName last">bInvert,</td></tr><tr><td class="first"></td><td class="PType">GLuint&nbsp;</td><td class="PName last">HostFBO</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Send OpenGL texture</p><p>SendTexture creates a shared texture for all receivers to access.</p><p>The invert flag is optional and by default true. This flips the texture in the Y axis, which is necessary because DirectX and OpenGL textures are opposite in Y. If it is set to false no flip occurs and the result may appear upside down.</p><p>The ID of a currently bound fbo should be passed in.</p></div>
</div>

<a name="SendImage"></a><a name="Topic884"></a><div class="CTopic TFunction LC">
 <div class="CTitle">SendImage</div>
 <div id="NDPrototype884" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::SendImage(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PModifierQualifier first"><span class="SHKeyword">const unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">pixels,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">width,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">height,</td></tr><tr><td class="first"></td><td class="PType">GLenum&nbsp;</td><td class="PName last">glFormat,</td></tr><tr><td class="first"></td><td class="PType"><span class="SHKeyword">bool</span>&nbsp;</td><td class="PName last">bInvert,</td></tr><tr><td class="first"></td><td class="PType">GLuint&nbsp;</td><td class="PName last">HostFBO</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Send pixel image</p><p>SendImage creates a shared texture using image pixels as the source instead of an OpenGL texture. The format of the image to be sent is RGBA by default but can be a different OpenGL format, for example GL_RGB or GL_BGRA_EXT.</p><p>The invert flag is optional and false by default.</p><p>The ID of a currently bound fbo should be passed in.</p></div>
</div>

<a name="IsInitialized"></a><a name="Topic885"></a><div class="CTopic TFunction LC">
 <div class="CTitle">IsInitialized</div>
 <div id="NDPrototype885" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">bool</span> Spout::IsInitialized()</div></div>
 <div class="CBody"><p>Initialization status</p></div>
</div>

<a name="GetName"></a><a name="Topic886"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetName</div>
 <div id="NDPrototype886" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">const</span> <span class="SHKeyword">char</span> * Spout::GetName()</div></div>
 <div class="CBody"><p>Sender name</p></div>
</div>

<a name="GetWidth"></a><a name="Topic887"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetWidth</div>
 <div id="NDPrototype887" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">unsigned</span> <span class="SHKeyword">int</span> Spout::GetWidth()</div></div>
 <div class="CBody"><p>Sender width</p></div>
</div>

<a name="GetHeight"></a><a name="Topic888"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetHeight</div>
 <div id="NDPrototype888" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">unsigned</span> <span class="SHKeyword">int</span> Spout::GetHeight()</div></div>
 <div class="CBody"><p>Sender height</p></div>
</div>

<a name="GetFps"></a><a name="Topic889"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetFps</div>
 <div id="NDPrototype889" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">double</span> Spout::GetFps()</div></div>
 <div class="CBody"><p>Sender frame rate</p></div>
</div>

<a name="GetFrame"></a><a name="Topic890"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetFrame</div>
 <div id="NDPrototype890" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">long</span> Spout::GetFrame()</div></div>
 <div class="CBody"><p>Sender frame number</p></div>
</div>

<a name="GetHandle"></a><a name="Topic891"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetHandle</div>
 <div id="NDPrototype891" class="NDPrototype"><div class="PSection PPlainSection">HANDLE Spout::GetHandle()</div></div>
 <div class="CBody"><p>Sender share handle</p></div>
</div>

<a name="GetCPU"></a><a name="Topic892"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetCPU</div>
 <div id="NDPrototype892" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">bool</span> Spout::GetCPU()</div></div>
 <div class="CBody"><p>Sender sharing method.&nbsp; Returns true if the sender is using CPU methods</p></div>
</div>

<a name="GetGLDX"></a><a name="Topic893"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetGLDX</div>
 <div id="NDPrototype893" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">bool</span> Spout::GetGLDX()</div></div>
 <div class="CBody"><p>Sender sharing compatibility.&nbsp; Returns true if the sender graphics hardware is compatible with NVIDIA NV_DX_interop2 extension</p></div>
</div>

<a name="Receiver"></a><a name="Topic894"></a><div class="CTopic TGroup LC">
 <div class="CTitle">Receiver</div>
 <div class="CBody"><p>Receiving functions</p><p>ReceiveTexture and ReceiveImage</p><ul><li><p>Connect to a sender</p></li><li><p>Set class variables for sender name, width and height</p></li><li><p>If the sender has changed size, set a flag for the application to update the receiving texture or image if IsUpdated() returns true.</p></li><li><p>Copy the sender shared texture to the user texture or image.</p></li></ul><p>Any changes to sender size are managed. However, if you are receiving to a local texture or image, the application must check for update at every cycle before receiving any data using &quot;IsUpdated()&quot;</p></div>
</div>

<a name="SetReceiverName"></a><a name="Topic895"></a><div class="CTopic TFunction LC">
 <div class="CTitle">SetReceiverName</div>
 <div id="NDPrototype895" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">void</span> Spout::SetReceiverName(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PModifierQualifier first"><span class="SHKeyword">const</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span> *&nbsp;</td><td class="PName last">SenderName</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Specify sender for connection</p><p>The if a name is specified, the receiver will not connect to any other unless the user selects one If that sender closes, the receiver will wait for the nominated sender to open If no name is specified, the receiver will connect to the active sender</p></div>
</div>

<a name="GetReceiverName"></a><a name="Topic896"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetReceiverName</div>
 <div id="NDPrototype896" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::GetReceiverName(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">sendername,</td></tr><tr><td class="PType first"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">maxchars</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Get sender for connection</p></div>
</div>

<a name="ReleaseReceiver"></a><a name="Topic897"></a><div class="CTopic TFunction LC">
 <div class="CTitle">ReleaseReceiver</div>
 <div id="NDPrototype897" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">void</span> Spout::ReleaseReceiver()</div></div>
 <div class="CBody"><p>Close receiver and release resources ready to connect to another sender</p></div>
</div>

<a name="ReceiveTexture"></a><a name="Topic898"></a><div class="CTopic TFunction LC">
 <div class="CTitle">ReceiveTexture</div>
 <div id="NDPrototype898" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">bool</span> Spout::ReceiveTexture()</div></div>
 <div class="CBody"><p>Connect to a sender and retrieve shared texture details</p></div>
</div>

<a name="ReceiveTexture(2)"></a><a name="Topic899"></a><div class="CTopic TFunction LC">
 <div class="CTitle">ReceiveTexture</div>
 <div id="NDPrototype899" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::ReceiveTexture(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first">GLuint&nbsp;</td><td class="PName last">TextureID,</td></tr><tr><td class="PType first">GLuint&nbsp;</td><td class="PName last">TextureTarget,</td></tr><tr><td class="PType first"><span class="SHKeyword">bool</span>&nbsp;</td><td class="PName last">bInvert,</td></tr><tr><td class="PType first">GLuint&nbsp;</td><td class="PName last">HostFbo</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Receive the sender shared texture</p><p>For a valid OpenGL receiving texture :</p><p>Copy from the sender shared texture if there is a texture to receive into.&nbsp; The receiving OpenGL texture can only be RGBA of dimension (width * height) and must be re-allocated for sender size change. Return if flagged for update.&nbsp; The update flag is reset when the receiving application calls IsUpdated().</p><p>If no arguments are passed :</p><p>Connect to a sender and retrieve shared texture details, initialize GL/DX interop for OpenGL texture access, and update the sender shared texture, frame count and framerate.&nbsp; The texture can then be accessed using :</p><ul><li><p>BindSharedTexture();</p></li><li><p>UnBindSharedTexture();</p></li><li><p>GetSharedTextureID();</p></li></ul><p>As with SendTexture, the host fbo argument is optional (default 0) but an fbo ID is necessary if it is currently bound, then that binding is restored. Otherwise the binding is lost.</p></div>
</div>

<a name="ReceiveImage"></a><a name="Topic900"></a><div class="CTopic TFunction LC">
 <div class="CTitle">ReceiveImage</div>
 <div id="NDPrototype900" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::ReceiveImage(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="first"></td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td></td><td class="PName last">Sendername,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PSymbols">&amp;</td><td class="PName last">width,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PSymbols">&amp;</td><td class="PName last">height,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td></td><td class="PName last">pixels,</td></tr><tr><td class="first"></td><td class="PType">GLenum&nbsp;</td><td></td><td class="PName last">glFormat,</td></tr><tr><td class="first"></td><td class="PType"><span class="SHKeyword">bool</span>&nbsp;</td><td></td><td class="PName last">bInvert,</td></tr><tr><td class="first"></td><td class="PType">GLuint&nbsp;</td><td></td><td class="PName last">HostFBO</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Copy the sender texture to image pixels.</p><p>Formats supported are : GL_RGBA, GL_RGB, GL_BGRA_EXT, GL_BGR_EXT.&nbsp; GL_BGRA_EXT and GL_BGR_EXT are dependent on those extensions being supported at runtime.&nbsp; If they are not, the rgba and rgb equivalents are used.&nbsp; The same sender size changes are handled with IsUpdated() as for ReceiveTexture.&nbsp; and the receiving buffer must be re-allocated if IsUpdated() returns true.&nbsp; NOTE : images with padding on each line are not supported.&nbsp; Also the width should be a multiple of 4</p><p>As with ReceiveTexture, the ID of a currently bound fbo should be passed in.</p></div>
</div>

<a name="IsUpdated"></a><a name="Topic901"></a><div class="CTopic TFunction LC">
 <div class="CTitle">IsUpdated</div>
 <div id="NDPrototype901" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">bool</span> Spout::IsUpdated()</div></div>
 <div class="CBody"><p>Query whether the sender has changed.</p><p>Must be checked at every cycle before receiving data.&nbsp; If this is not done, the receiving functions fail.</p></div>
</div>

<a name="IsConnected"></a><a name="Topic902"></a><div class="CTopic TFunction LC">
 <div class="CTitle">IsConnected</div>
 <div id="NDPrototype902" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">bool</span> Spout::IsConnected()</div></div>
 <div class="CBody"><p>Query sender connection.</p><p>If the sender closes, receiving functions return false, but connection can be tested at any time.</p></div>
</div>

<a name="IsFrameNew"></a><a name="Topic903"></a><div class="CTopic TFunction LC">
 <div class="CTitle">IsFrameNew</div>
 <div id="NDPrototype903" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">bool</span> Spout::IsFrameNew()</div></div>
 <div class="CBody"><p>Query received frame status</p><p>The receiving texture or pixel buffer is refreshed if the sender has produced a new frame This can be queried to process texture data only for new frames</p></div>
</div>

<a name="GetSenderFormat"></a><a name="Topic904"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetSenderFormat</div>
 <div id="NDPrototype904" class="NDPrototype"><div class="PSection PPlainSection">DWORD Spout::GetSenderFormat()</div></div>
 <div class="CBody"><p>Get sender DirectX texture format</p></div>
</div>

<a name="GetSenderName"></a><a name="Topic905"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetSenderName</div>
 <div id="NDPrototype905" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">const</span> <span class="SHKeyword">char</span> * Spout::GetSenderName()</div></div>
 <div class="CBody"><p>Get sender name</p></div>
</div>

<a name="GetSenderWidth"></a><a name="Topic906"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetSenderWidth</div>
 <div id="NDPrototype906" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">unsigned</span> <span class="SHKeyword">int</span> Spout::GetSenderWidth()</div></div>
 <div class="CBody"><p>Get sender width</p></div>
</div>

<a name="GetSenderHeight"></a><a name="Topic907"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetSenderHeight</div>
 <div id="NDPrototype907" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">unsigned</span> <span class="SHKeyword">int</span> Spout::GetSenderHeight()</div></div>
 <div class="CBody"><p>Get sender height</p></div>
</div>

<a name="GetSenderFps"></a><a name="Topic908"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetSenderFps</div>
 <div id="NDPrototype908" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">double</span> Spout::GetSenderFps()</div></div>
 <div class="CBody"><p>Get sender frame rate</p></div>
</div>

<a name="GetSenderFrame"></a><a name="Topic909"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetSenderFrame</div>
 <div id="NDPrototype909" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">long</span> Spout::GetSenderFrame()</div></div>
 <div class="CBody"><p>Get sender frame number</p></div>
</div>

<a name="GetSenderHandle"></a><a name="Topic910"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetSenderHandle</div>
 <div id="NDPrototype910" class="NDPrototype"><div class="PSection PPlainSection">HANDLE Spout::GetSenderHandle()</div></div>
 <div class="CBody"><p>Received sender share handle</p></div>
</div>

<a name="GetSenderTexture"></a><a name="Topic911"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetSenderTexture</div>
 <div id="NDPrototype911" class="NDPrototype"><div class="PSection PPlainSection">ID3D11Texture2D* Spout::GetSenderTexture()</div></div>
 <div class="CBody"><p>Received sender texture</p></div>
</div>

<a name="GetSenderCPU"></a><a name="Topic912"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetSenderCPU</div>
 <div id="NDPrototype912" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">bool</span> Spout::GetSenderCPU()</div></div>
 <div class="CBody"><p>Received sender sharing method.&nbsp; Returns true if the sender is using CPU methods</p></div>
</div>

<a name="GetSenderGLDX"></a><a name="Topic913"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetSenderGLDX</div>
 <div id="NDPrototype913" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">bool</span> Spout::GetSenderGLDX()</div></div>
 <div class="CBody"><p>Received sender sharing compatibility.&nbsp; Returns true if the sender graphics hardware is compatible with NVIDIA NV_DX_interop2 extension</p></div>
</div>

<a name="SelectSender"></a><a name="Topic914"></a><div class="CTopic TFunction LC">
 <div class="CTitle">SelectSender</div>
 <div id="NDPrototype914" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::SelectSender(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first">HWND&nbsp;</td><td class="PName last">hwnd</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Open sender selection dialog</p></div>
</div>

<a name="Frame_counting"></a><a name="Topic915"></a><div class="CTopic TGroup LC">
 <div class="CTitle">Frame counting</div>
</div>

<a name="SetFrameCount"></a><a name="Topic916"></a><div class="CTopic TFunction LC">
 <div class="CTitle">SetFrameCount</div>
 <div id="NDPrototype916" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">void</span> Spout::SetFrameCount(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first"><span class="SHKeyword">bool</span>&nbsp;</td><td class="PName last">bEnable</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Enable or disable frame counting globally</p></div>
</div>

<a name="DisableFrameCount"></a><a name="Topic917"></a><div class="CTopic TFunction LC">
 <div class="CTitle">DisableFrameCount</div>
 <div id="NDPrototype917" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">void</span> Spout::DisableFrameCount()</div></div>
 <div class="CBody"><p>Disable frame counting specifically for this application</p></div>
</div>

<a name="IsFrameCountEnabled"></a><a name="Topic918"></a><div class="CTopic TFunction LC">
 <div class="CTitle">IsFrameCountEnabled</div>
 <div id="NDPrototype918" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">bool</span> Spout::IsFrameCountEnabled()</div></div>
 <div class="CBody"><p>Return frame count status</p></div>
</div>

<a name="HoldFps"></a><a name="Topic919"></a><div class="CTopic TFunction LC">
 <div class="CTitle">HoldFps</div>
 <div id="NDPrototype919" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">void</span> Spout::HoldFps(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">fps</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Frame rate control.&nbsp; Desired frames per second.</p></div>
</div>

<a name="Frame_synchronization"></a><a name="Topic920"></a><div class="CTopic TGroup LC">
 <div class="CTitle">Frame synchronization</div>
 <div class="CBody"><p>Notes for synchronisation.</p><p>In cases where the receiver or the sender have different processing or cycle rates it is often necessary to synchronize one with the other to avoid missed or duplicate frames and possible visible hesitations.</p><p>This can be achieved using event functions &quot;SetFrameSync&quot; and &quot;WaitFrameSync&quot;.</p><ul><li><p>void SetFrameSync(const char* SenderName);</p></li><li><p>bool WaitFrameSync(const char *SenderName, DWORD dwTimeout = 0);</p></li></ul><p>WaitFrameSync A sender or receiver should use this before rendering wait for a signal from the other process that it is ready to send or to read another frame.</p><p>SetFrameSync After processing, a sender or receiver should signal that it is ready to either send or read another frame.</p><p>EXAMPLES</p><p>1) If the sender is faster, the slower receiver will miss frames.</p><p>Sender Before processing, the sender waits for a signal from the receiver that it is ready to receive a new frame.&nbsp; WaitFrameSync(const char* sendername, DORD dwTimeout);' Receiver After processing, signals the sender to produce a new frame.&nbsp; SetFrameSync(const char* sendername);</p><p>2) If the sender is slower, the faster receiver will duplicate frames.</p><p>Receiver Before processing, the receiver waits for a signal from the sender that a new frame is ready.&nbsp; WaitFrameSync(const char* sendername, DORD dwTimeout); Sender After processing, signals the receiver that a new frame is ready.&nbsp; SetFrameSync(const char* sendername);</p></div>
</div>

<a name="SetFrameSync"></a><a name="Topic921"></a><div class="CTopic TFunction LC">
 <div class="CTitle">SetFrameSync</div>
 <div id="NDPrototype921" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">void</span> Spout::SetFrameSync(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PModifierQualifier first"><span class="SHKeyword">const</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">SenderName</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Signal sync event.&nbsp; Create a named sync event and set for test</p></div>
</div>

<a name="WaitFrameSync"></a><a name="Topic922"></a><div class="CTopic TFunction LC">
 <div class="CTitle">WaitFrameSync</div>
 <div id="NDPrototype922" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::WaitFrameSync(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PModifierQualifier first"><span class="SHKeyword">const</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span>&nbsp;</td><td class="PSymbols">*</td><td class="PName last">SenderName,</td></tr><tr><td class="first"></td><td class="PType">DWORD&nbsp;</td><td></td><td class="PName last">dwTimeout</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Wait or test for named sync event.&nbsp; Wait until the sync event is signalled or the timeout elapses.&nbsp; Events are typically created based on the sender name and are effective between a single sender/receiver pair.&nbsp; - For testing for a signal, use a wait timeout of zero.&nbsp; - For synchronization, use a timeout greater than the expected delay</p></div>
</div>

<a name="EnableFrameSync"></a><a name="Topic923"></a><div class="CTopic TFunction LC">
 <div class="CTitle">EnableFrameSync</div>
 <div id="NDPrototype923" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">void</span> Spout::EnableFrameSync(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first"><span class="SHKeyword">bool</span>&nbsp;</td><td class="PName last">bSync</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Enable / disabley frame sync</p></div>
</div>

<a name="IsFrameSyncEnabled"></a><a name="Topic924"></a><div class="CTopic TFunction LC">
 <div class="CTitle">IsFrameSyncEnabled</div>
 <div id="NDPrototype924" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">bool</span> Spout::IsFrameSyncEnabled()</div></div>
 <div class="CBody"><p>Check for frame sync option</p></div>
</div>

<a name="Sender_names"></a><a name="Topic925"></a><div class="CTopic TGroup LC">
 <div class="CTitle">Sender names</div>
</div>

<a name="GetSenderCount"></a><a name="Topic926"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetSenderCount</div>
 <div id="NDPrototype926" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">int</span> Spout::GetSenderCount()</div></div>
 <div class="CBody"><p>Number of senders</p></div>
</div>

<a name="GetSender"></a><a name="Topic927"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetSender</div>
 <div id="NDPrototype927" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::GetSender(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">index,</td></tr><tr><td class="PType first"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">sendername,</td></tr><tr><td class="PType first"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">MaxSize</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Sender item name in the sender names set</p></div>
</div>

<a name="GetSenderList"></a><a name="Topic928"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetSenderList</div>
 <div id="NDPrototype928" class="NDPrototype"><div class="PSection PPlainSection">std::vector&lt;std::<span class="SHKeyword">string</span>&gt; Spout::GetSenderList()</div></div>
 <div class="CBody"><p>Return a list of current senders</p></div>
</div>

<a name="GetSenderIndex"></a><a name="Topic929"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetSenderIndex</div>
 <div id="NDPrototype929" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">int</span> Spout::GetSenderIndex(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PModifierQualifier first"><span class="SHKeyword">const</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">sendername</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Sender index into the set of names</p></div>
</div>

<a name="GetSenderInfo"></a><a name="Topic930"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetSenderInfo</div>
 <div id="NDPrototype930" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::GetSenderInfo(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PModifierQualifier first"><span class="SHKeyword">const</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td></td><td class="PName last">sendername,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PSymbols">&amp;</td><td class="PName last">width,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PSymbols">&amp;</td><td class="PName last">height,</td></tr><tr><td class="first"></td><td class="PType">HANDLE&nbsp;</td><td class="PSymbols">&amp;</td><td class="PName last">dxShareHandle,</td></tr><tr><td class="first"></td><td class="PType">DWORD&nbsp;</td><td class="PSymbols">&amp;</td><td class="PName last">dwFormat</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Sender information</p></div>
</div>

<a name="GetActiveSender"></a><a name="Topic931"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetActiveSender</div>
 <div id="NDPrototype931" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::GetActiveSender(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">Sendername</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Current active sender name</p></div>
</div>

<a name="SetActiveSender"></a><a name="Topic932"></a><div class="CTopic TFunction LC">
 <div class="CTitle">SetActiveSender</div>
 <div id="NDPrototype932" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::SetActiveSender(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PModifierQualifier first"><span class="SHKeyword">const</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">Sendername</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Set sender as active</p></div>
</div>

<a name="Graphics_adapter"></a><a name="Topic933"></a><div class="CTopic TGroup LC">
 <div class="CTitle">Graphics adapter</div>
 <div class="CBody"><p>Return graphics adapter number and names.&nbsp; Refer to the SpoutDirectX class for details.</p></div>
</div>

<a name="GetNumAdapters"></a><a name="Topic934"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetNumAdapters</div>
 <div id="NDPrototype934" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">int</span> Spout::GetNumAdapters()</div></div>
 <div class="CBody"><p>The number of graphics adapters in the system</p></div>
</div>

<a name="GetAdapterName"></a><a name="Topic935"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetAdapterName</div>
 <div id="NDPrototype935" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::GetAdapterName(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first"><span class="SHKeyword">int</span>&nbsp;</td><td></td><td class="PName last">index,</td></tr><tr><td class="PType first"><span class="SHKeyword">char</span>&nbsp;</td><td class="PSymbols">*</td><td class="PName last">adaptername,</td></tr><tr><td class="PType first"><span class="SHKeyword">int</span>&nbsp;</td><td></td><td class="PName last">maxchars</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Get adapter item name</p></div>
</div>

<a name="AdapterName"></a><a name="Topic936"></a><div class="CTopic TFunction LC">
 <div class="CTitle">AdapterName</div>
 <div id="NDPrototype936" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">char</span> * Spout::AdapterName()</div></div>
 <div class="CBody"><p>Return current adapter name</p></div>
</div>

<a name="GetAdapter"></a><a name="Topic937"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetAdapter</div>
 <div id="NDPrototype937" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">int</span> Spout::GetAdapter()</div></div>
 <div class="CBody"><p>Get current adapter index</p></div>
</div>

<a name="GetSenderAdapter"></a><a name="Topic938"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetSenderAdapter</div>
 <div id="NDPrototype938" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">int</span> Spout::GetSenderAdapter(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PModifierQualifier first"><span class="SHKeyword">const</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">sendername,</td></tr><tr><td class="first"></td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">adaptername,</td></tr><tr><td class="first"></td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">maxchars</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Get adapter index and name for a given sender</p><p>OpenDX11shareHandle will fail if the share handle has been created using a different graphics adapter (see spoutDirectX).</p><p>This function loops though all graphics adapters in the system until OpenDX11shareHandle is successful and the same adapter index as the sender is established.</p><p>This adapter can then be used by CreateDX11device when the Spout DirectX device is created. This can be done in DirectX applications (see examples for the SpoutDX class), but not for OpenGL because both OpenGL and DirectX must use the same adapter.</p><p>The function is included here for diagnostic purposes.</p></div>
</div>

<a name="GetAdapterInfo"></a><a name="Topic939"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetAdapterInfo</div>
 <div id="NDPrototype939" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::GetAdapterInfo(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">description,</td></tr><tr><td class="PType first"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">output,</td></tr><tr><td class="PType first"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">maxchars</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Get the description and output name of the current adapter</p></div>
</div>

<a name="GetAdapterInfo(2)"></a><a name="Topic940"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetAdapterInfo</div>
 <div id="NDPrototype940" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::GetAdapterInfo(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">index,</td></tr><tr><td class="PType first"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">description,</td></tr><tr><td class="PType first"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">output,</td></tr><tr><td class="PType first"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">maxchars</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Get the description and output display name for a given adapter</p></div>
</div>

<a name="Graphics_performance"></a><a name="Topic941"></a><div class="CTopic TGroup LC">
 <div class="CTitle">Graphics performance</div>
 <div class="CBody"><p>Windows Graphics performance preferences.&nbsp; Refer to the SpoutDirectX class for details.</p><p>Performance prefrence settings are available from Windows 10 April 2018 update &quot;Redstone 4&quot; (Version 1803, build 17134) and later.&nbsp; Windows 10 SDK required included in Visual Studio 2017 ver.15.7</p></div>
</div>

<a name="GetPerformancePreference"></a><a name="Topic942"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetPerformancePreference</div>
 <div id="NDPrototype942" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">int</span> Spout::GetPerformancePreference(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PModifierQualifier first"><span class="SHKeyword">const</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">path</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Get the Windows graphics preference for an application</p><table class="CDefinitionList"><tr><td class="CDLEntry">-1</td><td class="CDLDefinition"><p>Not registered</p></td></tr><tr><td class="CDLEntry">0</td><td class="CDLDefinition"><p>DXGI_GPU_PREFERENCE_UNSPECIFIED</p></td></tr><tr><td class="CDLEntry">1</td><td class="CDLDefinition"><p>DXGI_GPU_PREFERENCE_MINIMUM_POWER</p></td></tr><tr><td class="CDLEntry">2</td><td class="CDLDefinition"><p>DXGI_GPU_PREFERENCE_HIGH_PERFORMANCE</p></td></tr></table></div>
</div>

<a name="SetPerformancePreference"></a><a name="Topic943"></a><div class="CTopic TFunction LC">
 <div class="CTitle">SetPerformancePreference</div>
 <div id="NDPrototype943" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::SetPerformancePreference(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="first"></td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">preference,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">const</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">path</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Set the Windows graphics preference for an application</p><table class="CDefinitionList"><tr><td class="CDLEntry">-1</td><td class="CDLDefinition"><p>No preference</p></td></tr><tr><td class="CDLEntry">0</td><td class="CDLDefinition"><p>Default</p></td></tr><tr><td class="CDLEntry">1</td><td class="CDLDefinition"><p>Power saving</p></td></tr><tr><td class="CDLEntry">2</td><td class="CDLDefinition"><p>High performance</p></td></tr></table></div>
</div>

<a name="GetPreferredAdapterName"></a><a name="Topic944"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetPreferredAdapterName</div>
 <div id="NDPrototype944" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::GetPreferredAdapterName(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">preference,</td></tr><tr><td class="PType first"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">adaptername,</td></tr><tr><td class="PType first"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">maxchars</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Get the graphics adapter name for a Windows preference This is the first adapter for the given preference :</p><table class="CDefinitionList"><tr><td class="CDLEntry">DXGI_GPU_PREFERENCE_UNSPECIFIED</td><td class="CDLDefinition"><p>(0) Equivalent to EnumAdapters1</p></td></tr><tr><td class="CDLEntry">DXGI_GPU_PREFERENCE_MINIMUM_POWER</td><td class="CDLDefinition"><p>(1) Integrated GPU</p></td></tr><tr><td class="CDLEntry">DXGI_GPU_PREFERENCE_HIGH_PERFORMANCE</td><td class="CDLDefinition"><p>(2) External GPU / Discrete GPU</p></td></tr></table></div>
</div>

<a name="SetPreferredAdapter"></a><a name="Topic945"></a><div class="CTopic TFunction LC">
 <div class="CTitle">SetPreferredAdapter</div>
 <div id="NDPrototype945" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::SetPreferredAdapter(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">preference</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Set graphics adapter index for a Windows preference</p><p>This index is used by CreateDX11device when DirectX is intitialized</p><table class="CDefinitionList"><tr><td class="CDLEntry">DXGI_GPU_PREFERENCE_UNSPECIFIED</td><td class="CDLDefinition"><p>(0) Equivalent to EnumAdapters1</p></td></tr><tr><td class="CDLEntry">DXGI_GPU_PREFERENCE_MINIMUM_POWER</td><td class="CDLDefinition"><p>(1) Integrated GPU</p></td></tr><tr><td class="CDLEntry">DXGI_GPU_PREFERENCE_HIGH_PERFORMANCE</td><td class="CDLDefinition"><p>(2) External GPU / Discrete GPU</p></td></tr></table></div>
</div>

<a name="IsPreferenceAvailable"></a><a name="Topic946"></a><div class="CTopic TFunction LC">
 <div class="CTitle">IsPreferenceAvailable()</div>
 <div id="NDPrototype946" class="NDPrototype"><div class="PSection PPlainSection"><span class="SHKeyword">bool</span> Spout::IsPreferenceAvailable()</div></div>
 <div class="CBody"><p>Availability of Windows graphics preference settings.</p></div>
</div>

<a name="IsApplicationPath"></a><a name="Topic947"></a><div class="CTopic TFunction LC">
 <div class="CTitle">IsApplicationPath</div>
 <div id="NDPrototype947" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::IsApplicationPath(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PModifierQualifier first"><span class="SHKeyword">const</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">path</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Is the path a valid application</p><p>A valid application path will have a drive letter and terminate with &quot;.exe&quot;</p></div>
</div>

<a name="2.006_compatibility"></a><a name="Topic948"></a><div class="CTopic TGroup LC">
 <div class="CTitle">2.006 compatibility</div>
 <div class="CBody"><p>These functions are not necessary for Version 2.007 and should not be used for a new application.&nbsp; They are retained for compatibility with existing 2.006 code and may be removed in future release.&nbsp; For full compatibility with exsiting 2.006 code, the original 2.006 SDK is preserved in a <a href="https://github.com/leadedge/Spout2/tree/2.006" target="_top">separate branch.</a></p></div>
</div>

<a name="FindNVIDIA"></a><a name="Topic949"></a><div class="CTopic TFunction LC">
 <div class="CTitle">FindNVIDIA</div>
 <div id="NDPrototype949" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::FindNVIDIA(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first"><span class="SHKeyword">int</span>&nbsp;</td><td class="PSymbols">&amp;</td><td class="PName last">nAdapter</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Find the index of the NVIDIA adapter in a multi-adapter system</p></div>
</div>

<a name="GetAdapterInfo(3)"></a><a name="Topic950"></a><div class="CTopic TFunction LC">
 <div class="CTitle">GetAdapterInfo</div>
 <div id="NDPrototype950" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::GetAdapterInfo(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">renderadapter,</td></tr><tr><td class="PType first"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">renderdescription,</td></tr><tr><td class="PType first"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">renderversion,</td></tr><tr><td class="PType first"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">displaydescription,</td></tr><tr><td class="PType first"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">displayversion,</td></tr><tr><td class="PType first"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">maxsize</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Get detailed information for the current graphics adapter Must be called after DirectX initialization, not before</p><p>NOTES : On a “normal” system the Windows function EnumDisplayDevices and the DirectX function IDXGIAdapter::GetDesc always concur. i.e. the device that owns the head will be the device that performs the rendering.</p><p>On an Optimus system IDXGIAdapter::GetDesc will return whichever device has been selected for rendering.&nbsp; So on an Optimus system it is possible that IDXGIAdapter::GetDesc will return the dGPU whereas EnumDisplayDevices will return the iGPU.</p><p>This function compares the adapter descriptions of the two The string &quot;Intel&quot; reveals that it is an Intel device but the Vendor ID could also be used. For example : - 0x10DE NVIDIA - 0x163C Intel - 0x8086 Intel - 0x8087 Intel</p><p>See also the DirectX only version : bool spoutDirectX::GetAdapterInfo(char *adapter, char *display, int maxchars) DirectX9 not supported</p></div>
</div>

<a name="CreateSender"></a><a name="Topic951"></a><div class="CTopic TFunction LC">
 <div class="CTitle">CreateSender</div>
 <div id="NDPrototype951" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::CreateSender(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PModifierQualifier first"><span class="SHKeyword">const</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">name,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">width,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">height,</td></tr><tr><td class="first"></td><td class="PType">DWORD&nbsp;</td><td class="PName last">dwFormat</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Create a sender</p></div>
</div>

<a name="UpdateSender"></a><a name="Topic952"></a><div class="CTopic TFunction LC">
 <div class="CTitle">UpdateSender</div>
 <div id="NDPrototype952" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::UpdateSender(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PModifierQualifier first"><span class="SHKeyword">const</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">name,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">width,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">height</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Update a sender</p></div>
</div>

<a name="CreateReceiver"></a><a name="Topic953"></a><div class="CTopic TFunction LC">
 <div class="CTitle">CreateReceiver</div>
 <div id="NDPrototype953" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::CreateReceiver(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="first"></td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td></td><td class="PName last">sendername,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PSymbols">&amp;</td><td class="PName last">width,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PSymbols">&amp;</td><td class="PName last">height</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Create receiver connection</p></div>
</div>

<a name="CheckReceiver"></a><a name="Topic954"></a><div class="CTopic TFunction LC">
 <div class="CTitle">CheckReceiver</div>
 <div id="NDPrototype954" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::CheckReceiver(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="first"></td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td></td><td class="PName last">name,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PSymbols">&amp;</td><td class="PName last">width,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PSymbols">&amp;</td><td class="PName last">height,</td></tr><tr><td class="first"></td><td class="PType"><span class="SHKeyword">bool</span>&nbsp;</td><td class="PSymbols">&amp;</td><td class="PName last">bConnected</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Check receiver connection</p></div>
</div>

<a name="ReceiveTexture(3)"></a><a name="Topic955"></a><div class="CTopic TFunction LC">
 <div class="CTitle">ReceiveTexture</div>
 <div id="NDPrototype955" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::ReceiveTexture(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="first"></td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td></td><td class="PName last">name,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PSymbols">&amp;</td><td class="PName last">width,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PSymbols">&amp;</td><td class="PName last">height,</td></tr><tr><td class="first"></td><td class="PType">GLuint&nbsp;</td><td></td><td class="PName last">TextureID,</td></tr><tr><td class="first"></td><td class="PType">GLuint&nbsp;</td><td></td><td class="PName last">TextureTarget,</td></tr><tr><td class="first"></td><td class="PType"><span class="SHKeyword">bool</span>&nbsp;</td><td></td><td class="PName last">bInvert,</td></tr><tr><td class="first"></td><td class="PType">GLuint&nbsp;</td><td></td><td class="PName last">HostFBO</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Receive OpenGL texture</p></div>
</div>

<a name="ReceiveImage(2)"></a><a name="Topic956"></a><div class="CTopic TFunction LC">
 <div class="CTitle">ReceiveImage</div>
 <div id="NDPrototype956" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::ReceiveImage(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">pixels,</td></tr><tr><td class="first"></td><td class="PType">GLenum&nbsp;</td><td class="PName last">glFormat,</td></tr><tr><td class="first"></td><td class="PType"><span class="SHKeyword">bool</span>&nbsp;</td><td class="PName last">bInvert,</td></tr><tr><td class="first"></td><td class="PType">GLuint&nbsp;</td><td class="PName last">HostFbo</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Receive image pixels Format can be GL_RGBA, GL_BGRA, GL_RGB or GL_BGR for the receving buffer</p></div>
</div>

<a name="SelectSenderPanel"></a><a name="Topic957"></a><div class="CTopic TFunction LC">
 <div class="CTitle">SelectSenderPanel</div>
 <div id="NDPrototype957" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::SelectSenderPanel(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PModifierQualifier first"><span class="SHKeyword">const</span>&nbsp;</td><td class="PType"><span class="SHKeyword">char</span>*&nbsp;</td><td class="PName last">message</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Open dialog for the user to select a sender</p><p>Optional message argument</p><p>Replaced by SelectSender for 2.007</p></div>
</div>

<a name="Legacy_OpenGL_Draw_functions"></a><a name="Topic958"></a><div class="CTopic TGroup LC">
 <div class="CTitle">Legacy OpenGL Draw functions</div>
 <div class="CBody"><p>These functions are retained for compatibility with existing 2.006 code.</p><p>Enabled for build with &quot;legacyOpenGL&quot; defined in SpoutCommon.h</p></div>
</div>

<a name="DrawSharedTexture"></a><a name="Topic959"></a><div class="CTopic TFunction LC">
 <div class="CTitle">DrawSharedTexture</div>
 <div id="NDPrototype959" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::DrawSharedTexture(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="PType first"><span class="SHKeyword">float</span>&nbsp;</td><td class="PName last">max_x,</td></tr><tr><td class="PType first"><span class="SHKeyword">float</span>&nbsp;</td><td class="PName last">max_y,</td></tr><tr><td class="PType first"><span class="SHKeyword">float</span>&nbsp;</td><td class="PName last">aspect,</td></tr><tr><td class="PType first"><span class="SHKeyword">bool</span>&nbsp;</td><td class="PName last">bInvert,</td></tr><tr><td class="PType first">GLuint&nbsp;</td><td class="PName last">HostFBO</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Render the sender shared OpenGL texture</p></div>
</div>

<a name="DrawToSharedTexture"></a><a name="Topic960"></a><div class="CTopic TFunction LC last">
 <div class="CTitle">DrawToSharedTexture</div>
 <div id="NDPrototype960" class="NDPrototype WideForm"><div class="PSection PParameterSection CStyle"><table><tr><td class="PBeforeParameters"><span class="SHKeyword">bool</span> Spout::DrawToSharedTexture(</td><td class="PParametersParentCell"><table class="PParameters"><tr><td class="first"></td><td class="PType">GLuint&nbsp;</td><td class="PName last">TextureID,</td></tr><tr><td class="first"></td><td class="PType">GLuint&nbsp;</td><td class="PName last">TextureTarget,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">width,</td></tr><tr><td class="PModifierQualifier first"><span class="SHKeyword">unsigned</span>&nbsp;</td><td class="PType"><span class="SHKeyword">int</span>&nbsp;</td><td class="PName last">height,</td></tr><tr><td class="first"></td><td class="PType"><span class="SHKeyword">float</span>&nbsp;</td><td class="PName last">max_x,</td></tr><tr><td class="first"></td><td class="PType"><span class="SHKeyword">float</span>&nbsp;</td><td class="PName last">max_y,</td></tr><tr><td class="first"></td><td class="PType"><span class="SHKeyword">float</span>&nbsp;</td><td class="PName last">aspect,</td></tr><tr><td class="first"></td><td class="PType"><span class="SHKeyword">bool</span>&nbsp;</td><td class="PName last">bInvert,</td></tr><tr><td class="first"></td><td class="PType">GLuint&nbsp;</td><td class="PName last">HostFBO</td></tr></table></td><td class="PAfterParameters">)</td></tr></table></div></div>
 <div class="CBody"><p>Render OpenGL texture to the sender shared OpenGL texture.</p></div>
</div>

</body></html>